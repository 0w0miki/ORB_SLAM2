/* Auto-generated by genmsg_cpp for file /home/yuki0w0/ORB_SLAM2/Examples/ROS/orb_slam2/msg/MapKeyPoints.msg */
#ifndef ORB_SLAM2_MESSAGE_MAPKEYPOINTS_H
#define ORB_SLAM2_MESSAGE_MAPKEYPOINTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"

namespace orb_slam2
{
template <class ContainerAllocator>
struct MapKeyPoints_ {
  typedef MapKeyPoints_<ContainerAllocator> Type;

  MapKeyPoints_()
  : header()
  , frametime()
  , mappoints()
  , keypoints()
  {
  }

  MapKeyPoints_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , frametime()
  , mappoints(_alloc)
  , keypoints(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef ros::Time _frametime_type;
  ros::Time frametime;

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _mappoints_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  mappoints;

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _keypoints_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  keypoints;


  typedef boost::shared_ptr< ::orb_slam2::MapKeyPoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::orb_slam2::MapKeyPoints_<ContainerAllocator>  const> ConstPtr;
}; // struct MapKeyPoints
typedef  ::orb_slam2::MapKeyPoints_<std::allocator<void> > MapKeyPoints;

typedef boost::shared_ptr< ::orb_slam2::MapKeyPoints> MapKeyPointsPtr;
typedef boost::shared_ptr< ::orb_slam2::MapKeyPoints const> MapKeyPointsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::orb_slam2::MapKeyPoints_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::orb_slam2::MapKeyPoints_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace orb_slam2

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::orb_slam2::MapKeyPoints_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::orb_slam2::MapKeyPoints_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::orb_slam2::MapKeyPoints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b41fe03c1397cf4c381f01fea192e4c6";
  }

  static const char* value(const  ::orb_slam2::MapKeyPoints_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb41fe03c1397cf4cULL;
  static const uint64_t static_value2 = 0x381f01fea192e4c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::orb_slam2::MapKeyPoints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "orb_slam2/MapKeyPoints";
  }

  static const char* value(const  ::orb_slam2::MapKeyPoints_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::orb_slam2::MapKeyPoints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
time frametime\n\
geometry_msgs/Point[] mappoints\n\
geometry_msgs/Point[] keypoints\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::orb_slam2::MapKeyPoints_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::orb_slam2::MapKeyPoints_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::orb_slam2::MapKeyPoints_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::orb_slam2::MapKeyPoints_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.frametime);
    stream.next(m.mappoints);
    stream.next(m.keypoints);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct MapKeyPoints_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::orb_slam2::MapKeyPoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::orb_slam2::MapKeyPoints_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "frametime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.frametime);
    s << indent << "mappoints[]" << std::endl;
    for (size_t i = 0; i < v.mappoints.size(); ++i)
    {
      s << indent << "  mappoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.mappoints[i]);
    }
    s << indent << "keypoints[]" << std::endl;
    for (size_t i = 0; i < v.keypoints.size(); ++i)
    {
      s << indent << "  keypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.keypoints[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ORB_SLAM2_MESSAGE_MAPKEYPOINTS_H

